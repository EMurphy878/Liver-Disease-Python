#Import required packages 
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
 

#Data Cleaning
dat = pd.read_csv("HepatitisCData.csv")
dat.head()
dat.dtypes
dat.shape
dat.describe()
print(dat.isnull().sum())

#Imputation 
## Check dist of ALB, ALP, ALT, CHOL, and PROT
fig, axs = plt.subplots(ncols=5)
sns.boxplot(dat.ALB, ax=axs[0])
sns.boxplot(dat.ALP, ax=axs[1]) 
sns.boxplot(dat.ALT, ax=axs[2]) 
sns.boxplot(dat.CHOL, ax=axs[3]) 
sns.boxplot(dat.PROT, ax=axs[4])


meanimp = ["ALB","ALP", "ALT","CHOL", "PROT"]
impmean = SimpleImputer(missing_values=pd.NA, strategy='mean')
impmean = impmean.fit(dat[meanimp])
datimp = pd.DataFrame(impmean.transform(dat[meanimp]))
datimp.columns= meanimp
print(datimp.isnull().sum())
dat[meanimp] = datimp[meanimp]
print(dat.isnull().sum())

#Convert columns to numerical format 
encoder = LabelEncoder()
dat["Category"] = encoder.fit_transform(dat["Category"])
dat.dtypes
dat['Sex'].replace(['m', 'f'],[0, 1], inplace=True)
dat.dtypes
dat = dat.loc[:, ~dat.columns.str.contains('^Unnamed')]

#Check balance
disease_counts = dat["Category"].value_counts()
print(disease_counts)
temp_dat= pd.DataFrame({
    "Disease": disease_counts.index,
    "Counts": disease_counts.values
})
 
plt.figure(figsize = (18,8))
sns.barplot(x = "Disease", y = "Counts", data = temp_dat)
plt.xticks(rotation=90)
plt.show()


#Testing and training data split
X = dat["Category"]
print(X)
X.dtype
datft = dat.drop(columns=["Category"])
y = datft
print(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=25)
print(f"Train: {X_train.shape}, {y_train.shape}")
print(f"Test: {X_test.shape}, {y_test.shape}")

#K-folds validation 
 
# Initializing Models
model = RandomForestClassifier(random_state=10)
scores = cross_val_score(model, X, y,cv = 5)
print(f"Scores: {scores}")
print(f"Mean Score: {np.mean(scores)}")


# Training and testing Random Forest Classifier
rf_model = RandomForestClassifier(random_state=18)
rf_model.fit(X_train, y_train)
preds = rf_model.predict(X_test)
print(f"Accuracy on train data by Random Forest Classifier\
: {accuracy_score(y_train, rf_model.predict(X_train))*100}")
 
print(f"Accuracy on test data by Random Forest Classifier\
: {accuracy_score(y_test, preds)*100}")
 
cf_matrix = confusion_matrix(y_test, preds)
plt.figure(figsize=(12,8))
sns.heatmap(cf_matrix, annot=True)
plt.title("Confusion Matrix for Random Forest Classifier on Test Data")
plt.show()


